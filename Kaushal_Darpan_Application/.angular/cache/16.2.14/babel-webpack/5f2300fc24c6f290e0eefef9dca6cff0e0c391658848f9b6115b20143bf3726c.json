{"ast":null,"code":"import _asyncToGenerator from \"D:/Projects/Kaushal_Darpan_App/Kaushal_Darpan_Application/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../../Common/appsetting.service\";\nexport class DesignationMasterService {\n  constructor(http, appsettingConfig) {\n    this.http = http;\n    this.appsettingConfig = appsettingConfig;\n    this.APIUrl = this.appsettingConfig.apiURL + 'DesignationMaster';\n  }\n  extractData(res) {\n    return res;\n  }\n  handleErrorObservable(error) {\n    return throwError(error);\n  }\n  // Get all designations\n  GetAllDesignations() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      return yield _this.http.get(_this.APIUrl + '/GetAllDesignations', httpOptions).pipe(catchError(_this.handleErrorObservable)).toPromise();\n    })();\n  }\n  // Get designation by ID\n  GetByID(DesignationID) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      return yield _this2.http.get(_this2.APIUrl + '/GetByID/' + DesignationID, httpOptions).pipe(catchError(_this2.handleErrorObservable)).toPromise();\n    })();\n  }\n  // Create or update a designation\n  SaveData(request) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const headers = {\n        'Content-Type': 'application/json'\n      };\n      const body = JSON.stringify(request);\n      return yield _this3.http.post(_this3.APIUrl + '/SaveData', body, {\n        headers\n      }).pipe(catchError(_this3.handleErrorObservable)).toPromise();\n    })();\n  }\n  // Delete a designation by ID\n  DeleteDataByID(DesignationID, ModifyBy) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      return yield _this4.http.delete(_this4.APIUrl + '/DeleteDataByID/' + DesignationID + '/' + ModifyBy, httpOptions).pipe(catchError(_this4.handleErrorObservable)).toPromise();\n    })();\n  }\n  static #_ = this.ɵfac = function DesignationMasterService_Factory(t) {\n    return new (t || DesignationMasterService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AppsettingService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DesignationMasterService,\n    factory: DesignationMasterService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","throwError","catchError","DesignationMasterService","constructor","http","appsettingConfig","APIUrl","apiURL","extractData","res","handleErrorObservable","error","GetAllDesignations","_this","_asyncToGenerator","httpOptions","headers","get","pipe","toPromise","GetByID","DesignationID","_this2","SaveData","request","_this3","body","JSON","stringify","post","DeleteDataByID","ModifyBy","_this4","delete","_","i0","ɵɵinject","i1","HttpClient","i2","AppsettingService","_2","factory","ɵfac","providedIn"],"sources":["D:\\Projects\\Kaushal_Darpan_App\\Kaushal_Darpan_Application\\src\\app\\Services\\DesignationMaster\\Designation-master.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { DesignationMasterDataModel } from '../../Models/DesignationMasterDataModel'; // Adjust the path if needed\r\nimport { GlobalConstants } from '../../Common/GlobalConstants';\r\nimport { AppsettingService } from '../../Common/appsetting.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DesignationMasterService {\r\n  readonly APIUrl = this.appsettingConfig.apiURL + 'DesignationMaster';\r\n\r\n  constructor(private http: HttpClient, private appsettingConfig: AppsettingService) { }\r\n\r\n  extractData(res: Response) {\r\n    return res;\r\n  }\r\n\r\n  handleErrorObservable(error: Response | any) {\r\n    return throwError(error);\r\n  }\r\n\r\n  // Get all designations\r\n  public async GetAllDesignations() {\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json'\r\n      })\r\n    };\r\n    return await this.http.get(this.APIUrl + '/GetAllDesignations', httpOptions)\r\n      .pipe(\r\n        catchError(this.handleErrorObservable)\r\n      ).toPromise();\r\n  }\r\n\r\n  // Get designation by ID\r\n  public async GetByID(DesignationID: number) {\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json'\r\n      })\r\n    };\r\n    return await this.http.get(this.APIUrl + '/GetByID/' + DesignationID, httpOptions)\r\n      .pipe(\r\n        catchError(this.handleErrorObservable)\r\n      ).toPromise();\r\n  }\r\n\r\n  // Create or update a designation\r\n  public async SaveData(request: DesignationMasterDataModel) {    \r\n    const headers = { 'Content-Type': 'application/json' };\r\n    const body = JSON.stringify(request);\r\n    return await this.http.post(this.APIUrl + '/SaveData', body, { headers })\r\n      .pipe(\r\n        catchError(this.handleErrorObservable)\r\n    ).toPromise();\r\n    \r\n  }\r\n\r\n  // Delete a designation by ID\r\n  public async DeleteDataByID(DesignationID: number, ModifyBy: number) {\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json'\r\n      })\r\n    };\r\n    return await this.http.delete(this.APIUrl + '/DeleteDataByID/' + DesignationID + '/' + ModifyBy, httpOptions)\r\n      .pipe(\r\n        catchError(this.handleErrorObservable)\r\n      ).toPromise();\r\n  }\r\n}\r\n"],"mappings":";AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAASC,UAAU,QAAQ,MAAM;AACjC,SAASC,UAAU,QAAQ,gBAAgB;;;;AAQ3C,OAAM,MAAOC,wBAAwB;EAGnCC,YAAoBC,IAAgB,EAAUC,gBAAmC;IAA7D,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,gBAAgB,GAAhBA,gBAAgB;IAFrD,KAAAC,MAAM,GAAG,IAAI,CAACD,gBAAgB,CAACE,MAAM,GAAG,mBAAmB;EAEiB;EAErFC,WAAWA,CAACC,GAAa;IACvB,OAAOA,GAAG;EACZ;EAEAC,qBAAqBA,CAACC,KAAqB;IACzC,OAAOX,UAAU,CAACW,KAAK,CAAC;EAC1B;EAEA;EACaC,kBAAkBA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAC7B,MAAMC,WAAW,GAAG;QAClBC,OAAO,EAAE,IAAIjB,WAAW,CAAC;UACvB,cAAc,EAAE;SACjB;OACF;MACD,aAAac,KAAI,CAACT,IAAI,CAACa,GAAG,CAACJ,KAAI,CAACP,MAAM,GAAG,qBAAqB,EAAES,WAAW,CAAC,CACzEG,IAAI,CACHjB,UAAU,CAACY,KAAI,CAACH,qBAAqB,CAAC,CACvC,CAACS,SAAS,EAAE;IAAC;EAClB;EAEA;EACaC,OAAOA,CAACC,aAAqB;IAAA,IAAAC,MAAA;IAAA,OAAAR,iBAAA;MACxC,MAAMC,WAAW,GAAG;QAClBC,OAAO,EAAE,IAAIjB,WAAW,CAAC;UACvB,cAAc,EAAE;SACjB;OACF;MACD,aAAauB,MAAI,CAAClB,IAAI,CAACa,GAAG,CAACK,MAAI,CAAChB,MAAM,GAAG,WAAW,GAAGe,aAAa,EAAEN,WAAW,CAAC,CAC/EG,IAAI,CACHjB,UAAU,CAACqB,MAAI,CAACZ,qBAAqB,CAAC,CACvC,CAACS,SAAS,EAAE;IAAC;EAClB;EAEA;EACaI,QAAQA,CAACC,OAAmC;IAAA,IAAAC,MAAA;IAAA,OAAAX,iBAAA;MACvD,MAAME,OAAO,GAAG;QAAE,cAAc,EAAE;MAAkB,CAAE;MACtD,MAAMU,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACJ,OAAO,CAAC;MACpC,aAAaC,MAAI,CAACrB,IAAI,CAACyB,IAAI,CAACJ,MAAI,CAACnB,MAAM,GAAG,WAAW,EAAEoB,IAAI,EAAE;QAAEV;MAAO,CAAE,CAAC,CACtEE,IAAI,CACHjB,UAAU,CAACwB,MAAI,CAACf,qBAAqB,CAAC,CACzC,CAACS,SAAS,EAAE;IAAC;EAEhB;EAEA;EACaW,cAAcA,CAACT,aAAqB,EAAEU,QAAgB;IAAA,IAAAC,MAAA;IAAA,OAAAlB,iBAAA;MACjE,MAAMC,WAAW,GAAG;QAClBC,OAAO,EAAE,IAAIjB,WAAW,CAAC;UACvB,cAAc,EAAE;SACjB;OACF;MACD,aAAaiC,MAAI,CAAC5B,IAAI,CAAC6B,MAAM,CAACD,MAAI,CAAC1B,MAAM,GAAG,kBAAkB,GAAGe,aAAa,GAAG,GAAG,GAAGU,QAAQ,EAAEhB,WAAW,CAAC,CAC1GG,IAAI,CACHjB,UAAU,CAAC+B,MAAI,CAACtB,qBAAqB,CAAC,CACvC,CAACS,SAAS,EAAE;IAAC;EAClB;EAAC,QAAAe,CAAA,G;qBA7DUhC,wBAAwB,EAAAiC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,iBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAxBvC,wBAAwB;IAAAwC,OAAA,EAAxBxC,wBAAwB,CAAAyC,IAAA;IAAAC,UAAA,EAFvB;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}