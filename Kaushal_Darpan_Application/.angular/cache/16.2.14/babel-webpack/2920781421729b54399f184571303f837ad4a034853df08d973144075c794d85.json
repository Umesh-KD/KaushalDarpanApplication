{"ast":null,"code":"import _asyncToGenerator from \"D:/Projects/Kaushal_Darpan_App/Kaushal_Darpan_Application/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../../Common/appsetting.service\";\nexport class CenterAllotmentService {\n  constructor(http, appsettingConfig) {\n    this.http = http;\n    this.appsettingConfig = appsettingConfig;\n    this.APIUrl = this.appsettingConfig.apiURL + \"CenterCreation\";\n    this.headersOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + localStorage.getItem('authtoken')\n      })\n    };\n  }\n  extractData(res) {\n    return res;\n  }\n  handleErrorObservable(error) {\n    return throwError(error);\n  }\n  //Get all data\n  GetAllData(searchRequest) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const body = JSON.stringify(searchRequest);\n      return yield _this.http.post(`${_this.APIUrl}/GetAllData`, body, _this.headersOptions).pipe(catchError(_this.handleErrorObservable)).toPromise();\n    })();\n  }\n  SaveData(selectedColleges) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const body = JSON.stringify(selectedColleges); // Serialize the selected colleges\n      return yield _this2.http.post(_this2.APIUrl + '/SaveSSOIDData', body, _this2.headersOptions).pipe(catchError(_this2.handleErrorObservable)).toPromise();\n    })();\n  }\n  static #_ = this.ɵfac = function CenterAllotmentService_Factory(t) {\n    return new (t || CenterAllotmentService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AppsettingService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CenterAllotmentService,\n    factory: CenterAllotmentService.ɵfac,\n    providedIn: 'root'\n  });\n} //","map":{"version":3,"names":["HttpHeaders","throwError","catchError","CenterAllotmentService","constructor","http","appsettingConfig","APIUrl","apiURL","headersOptions","headers","localStorage","getItem","extractData","res","handleErrorObservable","error","GetAllData","searchRequest","_this","_asyncToGenerator","body","JSON","stringify","post","pipe","toPromise","SaveData","selectedColleges","_this2","_","i0","ɵɵinject","i1","HttpClient","i2","AppsettingService","_2","factory","ɵfac","providedIn"],"sources":["D:\\Projects\\Kaushal_Darpan_App\\Kaushal_Darpan_Application\\src\\app\\Services\\CenterAllotment\\CenterAllotment.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { GlobalConstants } from '../../Common/GlobalConstants';\r\nimport { CenterAllotmentSearchModel } from '../../Models/CenterAllotmentSearchModel';\r\nimport { AppsettingService } from '../../Common/appsetting.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CenterAllotmentService {\r\n  readonly APIUrl = this.appsettingConfig.apiURL + \"CenterCreation\";\r\n  readonly headersOptions: any;\r\n  constructor(private http: HttpClient, private appsettingConfig: AppsettingService) {\r\n    this.headersOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + localStorage.getItem('authtoken')\r\n      })\r\n    };\r\n  }\r\n\r\n  extractData(res: Response) {\r\n    return res;\r\n  }\r\n\r\n  handleErrorObservable(error: Response | any) {\r\n    return throwError(error);\r\n  }\r\n\r\n  //Get all data\r\n  public async GetAllData(searchRequest: CenterAllotmentSearchModel) {\r\n    const body = JSON.stringify(searchRequest);\r\n    return await this.http.post(`${this.APIUrl}/GetAllData`, body, this.headersOptions)\r\n      .pipe(\r\n        catchError(this.handleErrorObservable)\r\n      ).toPromise();\r\n  }\r\n\r\n  public async SaveData(selectedColleges: any[]): Promise<any> {\r\n    const body = JSON.stringify(selectedColleges); // Serialize the selected colleges\r\n\r\n    return await this.http.post(this.APIUrl + '/SaveSSOIDData', body, this.headersOptions)\r\n      .pipe(\r\n        catchError(this.handleErrorObservable)\r\n      ).toPromise();\r\n  }\r\n\r\n\r\n}//\r\n\r\n\r\n\r\n\r\n"],"mappings":";AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAASC,UAAU,QAAQ,MAAM;AACjC,SAASC,UAAU,QAAQ,gBAAgB;;;;AAQ3C,OAAM,MAAOC,sBAAsB;EAGjCC,YAAoBC,IAAgB,EAAUC,gBAAmC;IAA7D,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,gBAAgB,GAAhBA,gBAAgB;IAFrD,KAAAC,MAAM,GAAG,IAAI,CAACD,gBAAgB,CAACE,MAAM,GAAG,gBAAgB;IAG/D,IAAI,CAACC,cAAc,GAAG;MACpBC,OAAO,EAAE,IAAIV,WAAW,CAAC;QACvB,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,SAAS,GAAGW,YAAY,CAACC,OAAO,CAAC,WAAW;OAC9D;KACF;EACH;EAEAC,WAAWA,CAACC,GAAa;IACvB,OAAOA,GAAG;EACZ;EAEAC,qBAAqBA,CAACC,KAAqB;IACzC,OAAOf,UAAU,CAACe,KAAK,CAAC;EAC1B;EAEA;EACaC,UAAUA,CAACC,aAAyC;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAC/D,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACL,aAAa,CAAC;MAC1C,aAAaC,KAAI,CAACd,IAAI,CAACmB,IAAI,CAAC,GAAGL,KAAI,CAACZ,MAAM,aAAa,EAAEc,IAAI,EAAEF,KAAI,CAACV,cAAc,CAAC,CAChFgB,IAAI,CACHvB,UAAU,CAACiB,KAAI,CAACJ,qBAAqB,CAAC,CACvC,CAACW,SAAS,EAAE;IAAC;EAClB;EAEaC,QAAQA,CAACC,gBAAuB;IAAA,IAAAC,MAAA;IAAA,OAAAT,iBAAA;MAC3C,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACK,gBAAgB,CAAC,CAAC,CAAC;MAE/C,aAAaC,MAAI,CAACxB,IAAI,CAACmB,IAAI,CAACK,MAAI,CAACtB,MAAM,GAAG,gBAAgB,EAAEc,IAAI,EAAEQ,MAAI,CAACpB,cAAc,CAAC,CACnFgB,IAAI,CACHvB,UAAU,CAAC2B,MAAI,CAACd,qBAAqB,CAAC,CACvC,CAACW,SAAS,EAAE;IAAC;EAClB;EAAC,QAAAI,CAAA,G;qBApCU3B,sBAAsB,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,iBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAtBlC,sBAAsB;IAAAmC,OAAA,EAAtBnC,sBAAsB,CAAAoC,IAAA;IAAAC,UAAA,EAFrB;EAAM;EAyCnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}