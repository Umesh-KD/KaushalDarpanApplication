{"ast":null,"code":"export function DropdownValidators(control) {\n  if (control.value !== undefined && (isNaN(control.value) || control.value < 1)) {\n    return {\n      'dropdown': true\n    };\n  }\n  return null;\n}\nexport function DropdownValidatorsString(control) {\n  if (control.value !== undefined && (control.value == '' || control.value == 0)) {\n    return {\n      'dropdown': true\n    };\n  }\n  return null;\n}\nexport function createPasswordStrengthValidator(control) {\n  return control => {\n    const value = control.value;\n    if (!value) {\n      return null;\n    }\n    const hasUpperCase = /[A-Z]+/.test(value);\n    const hasLowerCase = /[a-z]+/.test(value);\n    const hasNumeric = /[0-9]+/.test(value);\n    const passwordValid = hasUpperCase && hasLowerCase && hasNumeric;\n    return !passwordValid ? {\n      passwordStrength: true\n    } : null;\n  };\n}\nexport function MustMatch(controlName, matchingControlName) {\n  return group => {\n    const control = group.get(controlName);\n    const matchingControl = group.get(matchingControlName);\n    if (!control || !matchingControl) {\n      return null;\n    }\n    // return if another validator has already found an error on the matchingControl\n    if (matchingControl.errors && !matchingControl.errors.mustMatch) {\n      return null;\n    }\n    // set error on matchingControl if validation fails\n    if (control.value !== matchingControl.value) {\n      matchingControl.setErrors({\n        mustMatch: true\n      });\n    } else {\n      matchingControl.setErrors(null);\n    }\n    return null;\n  };\n}","map":{"version":3,"names":["DropdownValidators","control","value","undefined","isNaN","DropdownValidatorsString","createPasswordStrengthValidator","hasUpperCase","test","hasLowerCase","hasNumeric","passwordValid","passwordStrength","MustMatch","controlName","matchingControlName","group","get","matchingControl","errors","mustMatch","setErrors"],"sources":["D:\\Projects\\Kaushal_Darpan_App\\Kaushal_Darpan_Application\\src\\app\\Services\\CustomValidators\\custom-validators.service.ts"],"sourcesContent":["import { AbstractControl, FormGroup, ValidationErrors, ValidatorFn } from '@angular/forms';\r\nexport function DropdownValidators(control: AbstractControl): { [key: string]: boolean } | null {\r\n  if (control.value !== undefined && (isNaN(control.value) || control.value < 1)) {\r\n    return { 'dropdown': true };\r\n  }\r\n  return null;\r\n}\r\nexport function DropdownValidatorsString(control: AbstractControl): { [key: string]: boolean } | null {\r\n  if (control.value !== undefined && (control.value=='' || control.value == 0)) {\r\n    return { 'dropdown': true };\r\n  }\r\n  return null;\r\n}\r\nexport function createPasswordStrengthValidator(control: AbstractControl): ValidatorFn {\r\n  return (control: AbstractControl): { [key: string]: boolean } | null => {\r\n    const value = control.value;\r\n    if (!value) {\r\n      return null;\r\n    }\r\n    const hasUpperCase = /[A-Z]+/.test(value);\r\n    const hasLowerCase = /[a-z]+/.test(value);\r\n    const hasNumeric = /[0-9]+/.test(value);\r\n    const passwordValid = hasUpperCase && hasLowerCase && hasNumeric;\r\n    return !passwordValid ? { passwordStrength: true } : null;\r\n  }\r\n}\r\nexport function MustMatch(controlName: string, matchingControlName: string) {\r\n  return (group: AbstractControl): { [key: string]: boolean } | null => {\r\n    const control = group.get(controlName);\r\n    const matchingControl = group.get(matchingControlName);\r\n    if (!control || !matchingControl) {\r\n      return null;\r\n    }\r\n    // return if another validator has already found an error on the matchingControl\r\n    if (matchingControl.errors && !matchingControl.errors.mustMatch) {\r\n      return null;\r\n    }\r\n    // set error on matchingControl if validation fails\r\n    if (control.value !== matchingControl.value) {\r\n      matchingControl.setErrors({ mustMatch: true });\r\n    } else {\r\n      matchingControl.setErrors(null);\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\n\r\n\r\n"],"mappings":"AACA,OAAM,SAAUA,kBAAkBA,CAACC,OAAwB;EACzD,IAAIA,OAAO,CAACC,KAAK,KAAKC,SAAS,KAAKC,KAAK,CAACH,OAAO,CAACC,KAAK,CAAC,IAAID,OAAO,CAACC,KAAK,GAAG,CAAC,CAAC,EAAE;IAC9E,OAAO;MAAE,UAAU,EAAE;IAAI,CAAE;;EAE7B,OAAO,IAAI;AACb;AACA,OAAM,SAAUG,wBAAwBA,CAACJ,OAAwB;EAC/D,IAAIA,OAAO,CAACC,KAAK,KAAKC,SAAS,KAAKF,OAAO,CAACC,KAAK,IAAE,EAAE,IAAID,OAAO,CAACC,KAAK,IAAI,CAAC,CAAC,EAAE;IAC5E,OAAO;MAAE,UAAU,EAAE;IAAI,CAAE;;EAE7B,OAAO,IAAI;AACb;AACA,OAAM,SAAUI,+BAA+BA,CAACL,OAAwB;EACtE,OAAQA,OAAwB,IAAuC;IACrE,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK;IAC3B,IAAI,CAACA,KAAK,EAAE;MACV,OAAO,IAAI;;IAEb,MAAMK,YAAY,GAAG,QAAQ,CAACC,IAAI,CAACN,KAAK,CAAC;IACzC,MAAMO,YAAY,GAAG,QAAQ,CAACD,IAAI,CAACN,KAAK,CAAC;IACzC,MAAMQ,UAAU,GAAG,QAAQ,CAACF,IAAI,CAACN,KAAK,CAAC;IACvC,MAAMS,aAAa,GAAGJ,YAAY,IAAIE,YAAY,IAAIC,UAAU;IAChE,OAAO,CAACC,aAAa,GAAG;MAAEC,gBAAgB,EAAE;IAAI,CAAE,GAAG,IAAI;EAC3D,CAAC;AACH;AACA,OAAM,SAAUC,SAASA,CAACC,WAAmB,EAAEC,mBAA2B;EACxE,OAAQC,KAAsB,IAAuC;IACnE,MAAMf,OAAO,GAAGe,KAAK,CAACC,GAAG,CAACH,WAAW,CAAC;IACtC,MAAMI,eAAe,GAAGF,KAAK,CAACC,GAAG,CAACF,mBAAmB,CAAC;IACtD,IAAI,CAACd,OAAO,IAAI,CAACiB,eAAe,EAAE;MAChC,OAAO,IAAI;;IAEb;IACA,IAAIA,eAAe,CAACC,MAAM,IAAI,CAACD,eAAe,CAACC,MAAM,CAACC,SAAS,EAAE;MAC/D,OAAO,IAAI;;IAEb;IACA,IAAInB,OAAO,CAACC,KAAK,KAAKgB,eAAe,CAAChB,KAAK,EAAE;MAC3CgB,eAAe,CAACG,SAAS,CAAC;QAAED,SAAS,EAAE;MAAI,CAAE,CAAC;KAC/C,MAAM;MACLF,eAAe,CAACG,SAAS,CAAC,IAAI,CAAC;;IAEjC,OAAO,IAAI;EACb,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}